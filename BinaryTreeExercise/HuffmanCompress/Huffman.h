#pragma once
//Huffman
#include <iostream>
#include <fstream>
#include <vector>
#include <windows.h>
#include <thread>
#include <mutex>
#include "BinaryTree.h"
#include "PriorityQueue.h"
#include <QProgressDialog>
#include <locale>
#include <codecvt>
class HuffmanCode {
private:
    std::string _fileName;//?????
    size_t _avaiableMermory;//???????
    size_t _fileSize=0;//?????§³
    unsigned int _threadNum=16;//?????
    std::mutex mtx;//??????
    BinaryTree<unsigned char> huffmanTree;//????????????????????
    //std::string preorder;//????????????????????????????#??????????????????
    std::vector<unsigned int> byteFrequence;//????????????????
    std::string huffmanCode[256];//????¦ËBYTE?????????????std::unorder_map???
    //????????????????
    void createHuffman(const std::vector<unsigned int>& frequence);
    //??????????size??§³?????????
    void readFile(const std::string& fileName, std::vector<char>& charSet, int size);
    //????????????BYTE[0-255]??????????vector???n¦Ë???????BYTE??n
    void charFrequence(const std::string& charSet, std::vector<unsigned int>& frequence);
    void charFrequence(unsigned int start, unsigned int end, std::vector<unsigned int>& frequence);
    void charFrequence(const std::string& charSet) { charFrequence(charSet, byteFrequence); }
    //????????§³
    size_t getFilesize(std::string fileName);
    //???????????????????
    void getHuffmanCode();
    void getHuffmanCode(TreeNode<unsigned char>* root, std::string* huffmanCode, const std::string& codePath);

public:
    HuffmanCode() :byteFrequence(256, 0) { getMemory(); }
    HuffmanCode(const std::string& fileName) :_fileName(fileName), byteFrequence(256, 0) {
        _avaiableMermory=getMemory();
        _threadNum = getCpuCoreCount();
        _fileSize=getFilesize(_fileName);
    };
    //???????
    void compress(const std::string& outputFileName,QProgressBar* progress);
    //???????
    void decompress(const std::string& outputPath,QProgressBar* progress);
    //??????????????
    void parallelCharFrequency();
    //???WindowsAPI????????
    int getCpuCoreCount();
    //???WindowsAPI??????????
    size_t getMemory();
    //????????
    void setName(std::string name){_fileName=name;}
    //??????????
    void setMemory(size_t size){_avaiableMermory=size;}
    //??????????
    void setThreadNum(int num){_threadNum=num;}
};

